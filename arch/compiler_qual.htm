<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0040)http://iacoma.cs.uiuc.edu/qual/comp.html -->
<HTML><HEAD><TITLE>Compiler Track</TITLE>
<META http-equiv=Content-Type content="text/html; charset=utf-8">
<META content="MSHTML 6.00.2900.2627" name=GENERATOR></HEAD>
<BODY>
<p>COMPILERS TRACK<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  CORE<BR>
  ====<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/optimizations.pdf">D. 
  Padua and M. Wolfe. &quot;Advanced Compiler Optimizations for Supercomputers,&quot; 
  Communications of the ACM. Vol. 29, No. 12, pp. 1184-1201, December 1986.</a></p>
<p>2.&nbsp;&nbsp;&nbsp;&nbsp;<a href="qual_papers/compilers/ghiya.pdf">&nbsp; 
  Rakesh Ghiya, Daniel Lavery, and David Sehr. &quot;On the Importance of Points-to 
  Analysis and Other Memory Disambiguation Methods for C Programs,&quot; Proceedings 
  of the ACM SIGPLAN 2001 Conference on Programming Language Design and Implementation, 
  Snowbird, UT, June 2001.</a></p>
<p>3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/wolf.pdf">Michael 
  E. Wolf and Monica S. Lam. &quot;A Data Locality Optimizing Algorithm,&quot; 
  ACM SIGPLAN Conference on Programming Languages Design and Implementation, pages 
  30-44, ACM Press, June 1991.</a></p>
<p>4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/toplas91.pdf">R. 
  Cytron, J. Ferrante, B. Rosen, M.Wegman, and K. Zadeck. &quot;Efficiently Computing 
  Static Single Assignment Form and the Control Dependence Graph,&quot; ACM Transactions 
  on Programming Languages and Systems,13(4):451-490, October 1991.</a></p>
<p>5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/Rau.pdf">Joseph 
  A. Fisher and B. Ramakrishna Rau. &quot;Instruction-Level Parallel Processing,&quot; 
  Science, New Series, Vol. 253, No. 5025, September 13, 1991, pp. 1233-1241.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  SPECIALIZATION<BR>
  ===============<BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Overview<BR>
  1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/auslander82.pdf">Marc 
  Auslander and Martin Hopkins. &quot;An Overview of the PL.8 Compiler,&quot; 
  Proceedings of the 1982 SIGPLAN symposium on Compiler Construction, Boston, 
  MA, pp. 22-31, 1982.</a> </p>
<p>2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/obrien95.pdf">Kevin 
  O'Brien , Kathryn M. O'Brien, Martin Hopkins, Arvin Shepherd&nbsp; and Ron Unrau, 
  &quot;XIL and YIL: The Intermediate Languages of TOBEY,&quot; ACM SIGPLAN Notices, 
  30(3), pp. 71-82, March 1993.</a></p>
<p>3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/almagor04.pdf">L. 
  Almagor, K.D. Cooper, A. Grosul, T.J. Harvey, S.W. Reeves, D. Subramanian, L. 
  Torczon, and T. Waterman. "Finding Effective Compilation Sequences,"&nbsp; Proceedings 
  of the 2004 Conference on Languages, Compilers, and Tools for Embedded Systems 
  (LCTES), June 2004, pp. 231-230.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Data Flow Analysis and Optimizations<BR>
  4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/kam.pdf">J. 
  B. Kam and J. D. Ullman. &quot;Global Data Flow Analysis and Iterative Algorithms,&quot;Journal 
  of the ACM, 23(1), pp. 158-171, Jan. 1976.</a></p>
<p>5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="qual_papers/compilers/ryder.pdf">Barbara 
  G. Ryder and Marvin C. Pauli. &quot;Elimination algorithms for data flow analysis,&quot; 
  ACM Computing Surveys, 18 (3), pp. 277-316. September 1986.</a></p>
<p>6. <a href="qual_papers/compilers/knoop92.pdf">J. Knoop, O. Ruthing, and B. 
  Steffen. &quot;Lazy Code Motion,&quot; Proceedings of the ACM Symposium on Programming 
  Language Design and Implementation (PLDI'92), 1992.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Static Single Assignment Form and SSA Optimizations<BR>
  7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/alpern88.pdf">B. 
  Alpern, M. N. Wegman, and F. K. Zadeck. &quot;Detecting Equality of Variables 
  in Programs,&quot; Proceedings of the 15th Annual ACM Symposium on Principles 
  of Programming Languages, pp. 1-11. 1988.</a></p>
<p>8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/wegman91.pdf">Mark 
  N. Wegman and Kenneth Zadeck. &quot;Constant Propagation with Conditional Branches,&quot; 
  ACM Transactions on Programming Languages and Systems, 13(2), pp. 181-210, April 
  1991.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Dependence Analysis and Loop Transformations&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>
  9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/wolf91.pdf">M. 
  E. Wolf and M. Lam. &quot;A Loop Transformation Theory and an Algorithm to Maximize 
  Parallelism. IEEE Transactions on Parallel and Distributed Systems, 2(4):452-471, 
  October 1991.</a></p>
<p>10.&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/allen87.pdf">R. 
  Allen and K. W. Kennedy. &quot;Automatic Translation of FORTRAN Programs to 
  Vector Form,&quot; ACM Transactions on Programming Languages and Systems (TOPLAS), 
  9(4), October 1987. pp. 491-542.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Pointer Analysis<br>
  11. <a href="qual_papers/compilers/steensgaard96.pdf">B. Steensgaard. &quot;Points-to 
  Analysis in Almost Linear Time,&quot; Proceedings of the 23th Annual ACM Symposium 
  on Principles of Programming Languages (POPL'96), pages 32-41, ACM Press, January 
  1996.</a><br>
  <br>
  12. <a href="qual_papers/compilers/fahndrich98.pdf">Manuel Fahndrich, Jeffrey 
  S. Foster, Zhendong Su, and Alexander Aiken. &quot;Partial Online Cycle Elimination 
  in Inclusion Constraint Graphs,&quot; Proceedings of the ACM SIGPLAN '98 Conference 
  on Programming Language Design and Implementation, pages 85-96, June 1998.</a><br>
  <BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Interprocedural Optimization<br>
  13. <a href="qual_papers/compilers/burke93.pdf">Michael Burke, Linda Torczon. 
  &quot;Interprocedural Optimization: Eliminating Unnecessary Recompilation&quot;, 
  ACM Transactions on Programming Languages and Systems, 15(3), July 1993.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Code Generation and Register Allocation<BR>
  14.&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/fraser92.pdf">C. 
  Fraser, R. Henry, and T. Proebsting. &quot;BURG: Fast Optimal Instruction Selection 
  and Tree Parsing.&quot; ACM SIGPLAN Notices, 27(4):68-76, April 1992.</a></p>
<p>15.&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/briggs94.pdf">Preston 
  Briggs, Keith Cooper and Linda Torczon. &quot;Improvements&nbsp; to Graph Coloring 
  Register Allocation,&quot; ACM Transactions on Programming Languages and Systems, 
  16(3), pp. 428-455, May 1994.</a><BR>
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
  <BR>
  Scheduling<BR>
  16.&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/gibbons86.pdf">P. 
  B. Gibbons and S. S. Muchnick. &quot;Efficient Instruction Scheduling for a 
  Pipelined Architecture,&quot; ACM SIGPLAN Symposium on Compiler Construction, 
  pages 11-16, June 1986.</a></p>
<p>17.&nbsp;&nbsp;&nbsp;&nbsp; <a href="qual_papers/compilers/hwu93.pdf">W. W. 
  Hwu, et al, "The Superblock: An Effective Technique for VLIW and Superscalar 
  Compilation," Instruction-Level Parallelism, B.R. Rau and J.A. Fisher (editors), 
  Kluwer Academic Publishers, ISBN 0-7923-9367-8, 1993, pp. 229-248.</a><BR>
  <BR>
</p>
</BODY></HTML>
